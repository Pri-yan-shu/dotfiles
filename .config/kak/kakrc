set-option global ui_options terminal_assistant=none terminal_enable_mouse=false terminal_info_max_width=90 terminal_status_on_top=true terminal_padding_char=▏░▒▓
set-option global tabstop 4
set-option global indentwidth 0
set-option global grepcmd 'rg --column'
set-option global scrolloff 10,0
set-option global startup_info_version 20350518
colorscheme mymonokai

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug-chain "occivink/kakoune-sudo-write" \
plug "andreyorst/plug.kak" noload \
plug "andreyorst/pmanage.kak" \
plug "andreyorst/kakoune-snippet-collection" \
plug "occivink/kakoune-find" \
plug "occivink/kakoune-snippets" \
plug "occivink/kakoune-phantom-selection" \
plug "eraserhd/kak-ansi" \
plug "occivink/kakoune-gdb" config %{ evaluate-commands %{gdb-enable-autojump} } \
plug "anhsirk0/kakoune-themes" theme \
plug "leira/base16-kakoune" theme \
plug chambln/kakoune-kit config %{
	map global user g ': git status -bs<ret>' -docstring 'git status'
	hook global WinSetOption filetype=git-status %{
		map window normal c ': git commit --verbose '
		map window normal l ': git log --oneline --graph -- <c-x>f'
		map window normal d ': -- %val{selections}<a-!><home> git diff '
		map window normal D ': -- %val{selections}<a-!><home> git diff --cached '
		map window normal a ': -- %val{selections}<a-!><home> git add '
		map window normal A ': -- %val{selections}<a-!><home> terminal git add -p '
		map window normal r ': -- %val{selections}<a-!><home> git reset '
		map window normal R ': -- %val{selections}<a-!><home> terminal git reset -p '
		map window normal o ': -- %val{selections}<a-!><home> git checkout '
	}
	hook global WinSetOption filetype=git-log %{
		map window normal d ': %val{selections}<a-!><home> git diff '
		map window normal <ret> ': %val{selections}<a-!><home> git show '
		map window normal r	 ': %val{selections}<a-!><home> git reset '
		map window normal R	 ': %val{selections}<a-!><home> terminal git reset -p '
		map window normal o	 ': %val{selections}<a-!><home> git checkout '
	}
}

map global normal <.> :bn<ret>
map global normal <k> :bp<ret>
map global normal <,> <c-u>
map global normal <h> <c-d>
map global normal <[> <c-i>
map global normal <]> <c-o>
map global normal <(> <[>
map global normal <)> <]>
map global normal <esc> ";,"
map global normal <c-d> ":comment-line<ret>"
map global normal <a-esc> ":db<ret>"
map global normal <quote> <dquote>
map global normal E <a-a>
map global normal e <a-i>
map global object e w
map global object E <a-w>
map global normal <c-up> '|printf "%d\n" $(($kak_selection + 1))<ret>'
map global normal <c-down> '|printf "%d\n" $(($kak_selection - 1))<ret>'
map global normal m lm
map global normal M m

map -docstring "ctags" global user i '<a-a>w:ctags-funcinfo <ret>'
map -docstring "ctags" global user s ':ctags-search '
map -docstring "ctags" global user S '<a-a>w:ctags-search<ret>'

map global user z ':z '
map global user m ':man '
map global user u :firefox<ret>
map global user o ":edit ~/.config/kak/kakrc<ret>"
map global user r :surround-replace<ret>
map global user D ":b *debug*<ret>"
map global user d ':doc '
map global user c ':cmd '
map global user s ': enter-user-mode shell<ret>'

# map global user e ": snippets-menu<ret>"
map -docstring "clipboard" global user Y "<a-|>wl-copy -p >/dev/null 2>&1 &<ret>"
map -docstring "clipboard" global user y "<a-|>wl-copy >/dev/null 2>&1 &<ret>"
map -docstring "clipboard" global user p "!wl-paste -n<ret>"
map -docstring "clipboard" global user P "!wl-paste -n -p<ret>"
map global user q ":phantom-cycle<ret>"


map -docstring "surround add" global user <(> ':surround-nest ( )<ret>'
map -docstring "surround add" global user <{> ':surround-nest { }<ret>'
map -docstring "surround add" global user <[> ':surround-nest [ ]<ret>'
map -docstring "surround add" global user <lt> ':surround-nest <lt> <gt><ret>'
map -docstring "surround add" global user <quote> ":surround-sym<ret>"
map -docstring "surround rm" global user <)> ':surround-delete<ret>'
map -docstring "surround rm" global user <}> ':surround-delete<ret>'
map -docstring "surround rm" global user <]> ':surround-delete<ret>'
map -docstring "surround rm" global user <gt> ':surround-delete<ret>'
map -docstring "surround rm" global user <dquote> ':surround-delete<ret>'


map global prompt <up> <s-tab>
map global prompt <down> <tab>
map global prompt <tab> <down>
map global prompt <s-tab> <up>
map global prompt <pageup> "<a-;><pageup>"
map global prompt <pagedown> "<a-;><pagedown>"
map global prompt <home> <up>
map global prompt <end> <down>

map global insert <(> "()<a-;>h"
map global insert <{> "{}<a-;>h"
map global insert <[> "[]<a-;>h"
map global insert <)> "<a-;>:close-pair )<ret>"
map global insert <}> "<a-;>:close-pair }<ret>"
map global insert <]> "<a-;>:close-pair ]<ret>"
map global insert <quote> "''<a-;>h"
map global insert <dquote> '""<a-;>h'

declare-user-mode gdb
map global gdb s ":gdb-next<ret>"
map global gdb S ":gdb-step<ret>"
map global gdb r ":gdb-continue-or-run<ret>"
map global gdb b ":gdb-toggle-breakpoint<ret>"
map global gdb B ":gdb-clear-breakpoint<ret>"
map global gdb t ":gdb-backtrace<ret>"
map global gdb t ":gdb-backtrace<ret>"
map global gdb i ":gdb-interrupt<ret>"
map global gdb I ":gdb-jump-to-location<ret>"
map global gdb p "<a-a>w:gdb-print<ret>"
map global gdb e ":gdb-toggle-execution<ret>"
map global gdb a ":gdb-toggle-autojump"
map global gdb <pageup> ":gdb-backtrace-up<ret>"
map global gdb <pagedown> ":gdb-backtrace-down<ret>"
map global normal j ":enter-user-mode gdb<ret>"
map global normal J ":enter-user-mode -lock gdb<ret>"

declare-user-mode web
map global web y ": pandoc-web https://inv.nadeko.net/search?q="
map global user w ": enter-user-mode web<ret>"

map global normal l ':enter-user-mode lsp<ret>'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

map -docstring "xml tag object" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}
map -docstring "markdown links" global object m %{c\[.*?\]\(,\)<ret>}
map -docstring "markdown links" global object s <esc>/\[(.*?)\]\((.*?)\)<ret>

define-command -params 1.. fzf %{
	prompt -shell-script-candidates "%arg{1}" "%arg{2}: " %{
		set-register p %val{text}
	}
}

declare-user-mode shfzf
map global shfzf e ": fzf env<ret>"
map global shfzf l ": fzf ls<ret>"
map global shfzf c ": fzf ls cd<ret>: sh-insert-and-send cd %reg{p}<ret>"
map global shfzf f ": sh-footclient "
map global shfzf c ": sh-cd "

# declare-user-mode rand
# map global rand f ":echo %val{buffile}"

# HOOKS

lsp-inlay-hints-enable global
hook global	WinSetOption filetype=(c|cpp|cc|h|hh) %{
  hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  hook window -group semantic-tokens NormalIdle	.* lsp-semantic-tokens
  hook window -group semantic-tokens InsertIdle	.* lsp-semantic-tokens
  hook -once -always window	WinSetOption filetype=.* %{
	remove-hooks window	semantic-tokens
  }
}

# # COMMANDS

define-command phantom-cycle %{
	# exec ": phantom-selection-add-selection<ret>"
	evaluate-commands phantom-selection-add-selection
	debug "added selection"
	hook -group	phantom	window RawKey <ret>	evaluate-commands phantom-selection-iterate-next
	debug "hook"
	hook window	RawKey <esc> %{
		evaluate-commands phantom-selection-clear
		# exec ": phantom-selection-clear<ret>"
		remove-hooks window	phantom
	}
}

define-command x %{ evaluate-commands "wq" }

define-command z -params 1 %{ cd %arg{1} }
complete-command z -menu shell-script-candidates %{ zoxide query -l } 

define-command file -params 1 %{ edit %arg{1} }
complete-command file -menu shell-script-candidates %{ fd . --type f }
map global user f ":file "

map global user k %{ prompt open %{ edit %val{text} } -shell-script-candidates %{ fd . --type f } }

# HOP-KAK
declare-option range-specs hop_ranges
declare-option str hop_kak_keyset 'tnseriaodhcv,.gmkxplbfuwyzqj'
set-face global hop_label_head red,black+F
set-face global hop_label_tail red,black+F
# set-face global hop_label_head red,default+F
# set-face global hop_label_tail red,default+F

map global normal <a-%> ':execute-keys gtGbx<ret>'

define-command hop-kak %{
  evaluate-commands -no-hooks -- %sh{ hop-kak --keyset "$kak_opt_hop_kak_keyset" --sels "$kak_selections_desc" }
}

define-command -override hop-kak-words %{
  evaluate-commands -no-hooks -- %sh{ hop-kak --keyset "$kak_opt_hop_kak_keyset" --sels "$kak_selections_desc" }
  hook -once -always window RawKey <esc> %{ exec ";," }
  hook -once -always window ModeChange .*:normal %{ evaluate-commands set-option window scrolloff 10,0 }
}

map global normal t ":set-option window scrolloff 0,0<ret>gtGbGls\w+<ret>: hop-kak-words<ret>"
map global normal T ":set-option window scrolloff 0,0<ret>gtGbGlS\n<ret>: hop-kak-words<ret>"

hook global WinSetOption filetype=(man|doc|shell-session) %{ remove-highlighter window/num-lines }
hook global WinSetOption filetype=(man|markdown|shell-session) %{ add-highlighter window/ wrap -word }

# HIGHLIGHTERS
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb
add-highlighter global/ show-whitespaces -indent '╎' -lf ' ' -spc ' ' -nbsp ' ' -tab '╎' -tabpad ' '
set-face global MatchingChar cyan,default
add-highlighter global/ show-matching
hook global WinCreate .* %{
	add-highlighter window/num-lines number-lines -hlcursor -separator ' '
  # add-highlighter window/ dynregex '%reg{/}' 0:+i
  # add-highlighter window/ regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red
  # declare-option line-specs my_flags
  # add-highlighter window/ flag-lines blue my_flags
# }

# BROWSE COMPLETIONS WITH UP AND DOWN
hook global InsertCompletionShow .* %{
	try %{
		# this command temporarily removes cursors preceded by whitespace;
		# if there are no cursors left, it raises an error, does not
		# continue to execute the mapping commands, and the error is eaten
		# by the `try` command so no warning appears.
		execute-keys -draft 'h<a-K>\h<ret>'
		map window insert <down> <c-n>
		map window insert <up> <c-p>
		hook -once -always window InsertCompletionHide .* %{
			unmap window insert <down> <c-n>
			unmap window insert <up> <c-p>
		}
	}
}


hook global WinSetOption filetype=(c|cpp) %{
	clang-enable-autocomplete 
	clang-enable-diagnostics
	alias window lint clang-parse
	alias window lint-next-error clang-diagnostics-next
}


set-face global CurWord +b

# hook global NormalIdle .* %{
#     evaluate-commands -draft %{ try %{
#         exec ,<a-i>w <a-k>\A\w+\z<ret>
#         add-highlighter -override global/curword regex "\b\Q%val{selection}\E\b" 0:CurWord
#     } catch %{
#         add-highlighter -override global/curword group
#     } }
# }

set-face global InsertCursor black,cyan

hook global ModeChange .*:.*:insert %{
    set-face window PrimaryCursor InsertCursor
    set-face window PrimaryCursorEol InsertCursor
}

hook global ModeChange .*:insert:.* %{ try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
} }

hook global -always BufOpenFifo '\*grep\*' %{ map global normal <minus> ': grep-next-match<ret>' }
hook global -always BufOpenFifo '\*make\*' %{ map global normal <minus> ': make-next-error<ret>' }

define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) } }

define-command delete-buffers-matching -params 1 %{
    evaluate-commands -buffer * %{
        evaluate-commands %sh{ case "$kak_buffile" in $1) echo "delete-buffer" ;; esac }
    }
}

declare-option -hidden str swap_buffer_target
define-command swap-buffer-with -override -params 1 -client-completion %{
    set-option global swap_buffer_target %val{bufname}
    edit -scratch # release current window for other client
    evaluate-commands -client %arg{1} "
        set-option global swap_buffer_target %%val{bufname}
        buffer %opt{swap_buffer_target}
    "
    delete-buffer # delete the temporary scratch buffer
    buffer %opt{swap_buffer_target}
}

define-command diff-buffers -override -params 2 %{
    evaluate-commands %sh{
        file1=$(mktemp)
        file2=$(mktemp)
        echo "
            evaluate-commands -buffer '$1' write -force $file1
            evaluate-commands -buffer '$2' write -force $file2
            edit! -scratch *diff-buffers*
            set buffer filetype diff
            set-register | 'diff -u $file1 $file2; rm $file1 $file2'
            execute-keys !<ret>gg
        "
}}

complete-command diff-buffers buffer

define-command clang-format-cursor %{
    exec -draft <percent>| "clang-format --lines=%val{cursor_line}:%val{cursor_line}" <ret>
}
